import os
from google.generativeai import configure, GenerativeModel
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Configure Gemini API
configure(api_key=GEMINI_API_KEY)

# Initialize the model instance
try:
    model = GenerativeModel(model_name="gemini-1.5-pro")
except Exception as e:
    print(f"Error initializing Gemini model: {e}")
    raise e


def analyze_market_trends(idea: str) -> dict:
    """
    Uses Gemini API to fetch top competitors and give similarity scores for the startup idea.
    """
    try:
        # Prompt for the Gemini API
        prompt = f"""
        Analyze the market for a startup idea: "{idea}". 
        Identify the top three competitors and provide a similarity score (0-100) indicating how similar they are to this idea. 
        Include relevant market size and growth potential.
        """

        # Fetch data from Gemini API
        response = model.generate_content(prompt)
        market_analysis = response.text.strip()

        competitors = []
        for line in market_analysis.splitlines():
            if ":" in line:
                parts = line.split(":", 1)  # Ensure only one split occurs
                name = parts[0].strip()
                score = parts[1].strip() if len(parts) > 1 else "Unknown"
                competitors.append({
                    "name": name,
                    "similarity_score": score
                })

        # Return formatted market analysis
        return {
            "idea": idea,
            "market_size": "Large",  # Placeholder, could also be generated by Gemini
            "growth_potential": "High",  # Placeholder, could also be generated by Gemini
            "competitor_analysis": competitors
        }

    except Exception as e:
        print(f"Error analyzing market trends: {e}")
        return {
            "idea": idea,
            "market_size": "Unknown",
            "growth_potential": "Unknown",
            "competitor_analysis": []
        }